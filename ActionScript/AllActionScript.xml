<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_package" deleted="false" description="Creates a class" enabled="true" id="com.adobe.flexide.as.core.codetemplates.class" name="class">class ${enclosing_type}&#13;
{&#13;
	//TODO class body&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Robotlegs AS3 command class body" enabled="true" name="commandBody">[Inject]
public var ${name}:${type};

override public function execute():void
{
	${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates Constructor for a class" enabled="true" id="com.adobe.flexide.as.core.codetemplates.constructor" name="constructor">public function ${enclosing_type}() &#13;
{&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Robotlegs Context class body" enabled="true" name="contextBody">// ------- Constructor -------

public function ${enclosing_type}(contextView:DisplayObjectContainer=null, autoStartup:Boolean=true)
{
	super(contextView, autoStartup);
}
		
		
// ------- Context overrides -------

override public function startup():void
{
	commandMap.mapEvent(ContextEvent.STARTUP, ConfigureModelsCommand, ContextEvent, true);
	commandMap.mapEvent(ContextEvent.STARTUP, ConfigureControllersCommand, ContextEvent, true);
	commandMap.mapEvent(ContextEvent.STARTUP, ConfigureServicesCommand, ContextEvent, true);
	commandMap.mapEvent(ContextEvent.STARTUP, ConfigureViewsCommand, ContextEvent, true);
	${cursor}
	dispatchEvent(new ContextEvent(ContextEvent.STARTUP));
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Dispatch a Signal" enabled="true" name="dispatchSignal">if (${field} != null)
	${field}.dispatch(${cursor});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="do-while loop" enabled="true" id="com.adobe.flexide.as.core.codetemplates.do" name="do">do &#13;
{&#13;
	${line_selection}${cursor}&#13;
} while (${condition:local_var(Boolean)});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Creates an if else if code block" enabled="true" id="com.adobe.flexide.as.core.codetemplates.ifElseIf" name="elseif">else if (${condition:local_var(Boolean)}) 
{
	${line_selection}${cursor}
}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates the body of an AS3 Event subclass" enabled="true" name="eventBody">// ------- Event type constants -------
		
public static const ${type_const}:String = "${type_const_value}";


// ------- Constructor -------

public function ${enclosing_type}(type:String, ${cursor}bubbles:Boolean = false, cancelable:Boolean = false)
{
	super(type, bubbles, cancelable);
}


// ------- Event overrides -------

override public function clone():Event
{
	return new ${enclosing_type}(type, bubbles, cancelable);
}

		
override public function toString():String
{
	return formatToString("${enclosing_type}", "type", "bubbles", "cancelable", "eventPhase");
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Iterator over value of an array using enumeration" enabled="true" id="com.adobe.flexide.as.core.codetemplates.fore" name="fore">for each (var ${index}:${type} in ${array})&#13;
{&#13;
	${line_selection}${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Iterate over an array" enabled="true" id="com.adobe.flexide.as.core.codetemplates.fori" name="fori">for (var ${index}:int = 0, len:int = ${array}.length; ${index} &lt; len; ${index}++)&#13;
{&#13;
	${line_selection}${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Creates a function" enabled="true" id="com.adobe.flexide.as.core.codetemplates.function" name="function">${specifier:values(private, public, protected)} function ${fname}():${type:values(void,String,Number,Boolean,Object)}
{
	${line_selection}${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates a getter function" enabled="true" id="com.adobe.flexide.as.core.codetemplates.getter" name="getter">${specifier:values(public, private, protected)} function get ${property}():${Type:values(String,Number)} &#13;
{&#13;
	${cursor}&#13;
	return ${null};&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="If statement" enabled="true" id="com.adobe.flexide.as.core.codetemplates.if" name="if">if (${condition:local_var(Boolean)}) &#13;
{&#13;
	${line_selection}${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Inject metadata for Robotlegs AS3" enabled="true" name="inject">[Inject]
public var ${name}:${type};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Creates commandMap event mapping for Robotlegs AS3" enabled="true" name="mapCommand">commandMap.mapEvent(${EventClass}.${type}, ${CommandClass}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Adds context listener for Robotlegs AS3" enabled="true" name="mapContextListener">addContextListener(${EventClass}.${type}, ${handler}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Creates eventMap mapping for Robotlegs AS3" enabled="true" name="mapListener">eventMap.mapListener(${specifier:values(eventDispatcher, view)}, ${EventClass}.${type}, ${handler}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Map a Robotlegs mediator to its associated view class" enabled="true" name="mapMediator">mediatorMap.mapView(${ViewClass}, ${MediatorClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Maps a Robotlegs view listener" enabled="true" name="mapViewListener">addViewListener(${EventClass}.${type}, ${handler}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Robotlegs Mediator subclass body" enabled="true" name="mediatorBody">// ------- Injections -------

[Inject]
public var view:${viewClass};


// ------- Mediator overrides -------

override public function onRegister():void
{
	${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="override public function" enabled="true" name="opf">override public function </template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="override protected function" enabled="true" name="oprf">override protected function </template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Creates a package" enabled="true" id="com.adobe.flexide.as.core.codetemplates.package" name="package">package ${enclosing_package}&#13;
{&#13;
	class ${enclosing_type}&#13;
	{&#13;
		${cursor}&#13;
	}	&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Public function" enabled="true" name="pf">public function ${fname}(${parameters}):${type:values(void,String,Number,Boolean,Object)}
{
	${line_selection}${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Creates init with [PostConstruct]" enabled="true" name="postConstruct">// ------- Initialization -------

[PostConstruct]
public function init():void
{
	${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Private function" enabled="true" name="prf">private function ${fname}(${parameters}):${type:values(void,String,Number,Boolean,Object)}
{
	${line_selection}${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates a property including variable definition, getter and setter methods" enabled="true" id="com.adobe.flexide.as.core.codetemplates.property" name="property">private var _${name}:${Type};
public function get ${name}():${Type} { return _${name}; }
public function set ${name}(${value}:${Type}):void
{
	if (_${name} == ${value})
		return;
	_${name} = value;${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="private static const" enabled="true" name="prsc">private static const ${name}:${type} = ${initializer};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="private var" enabled="true" name="prv">private var ${name}:${type}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="public static const" enabled="true" name="psc">public static const ${name}:${type} = ${initializer};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="public var" enabled="true" name="pv">public var ${name}:${type}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Section header" enabled="true" name="sectionHeader">// ------- ${SectionName} -------</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates a setter function" enabled="true" id="com.adobe.flexide.as.core.codetemplates.setter" name="setter">${specifier:values(public, protected, private)} function set ${property}(${value}:${Type:values(String,Number,Boolean)}):void &#13;
{&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Adds a new Signal property" enabled="true" name="signal">private var _${signalName}:Signal;
public function get ${signalName}():ISignal
{
	return _${signalName} ||= new Signal(${cursor});
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Creates a switch block" enabled="true" id="com.adobe.flexide.as.core.codetemplates.switch" name="switch">switch (${expression})&#13;
{&#13;
	case ${result}:&#13;
		${cursor}&#13;
		break;&#13;
	&#13;
	default:&#13;
		break;&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="FlexUnit asynchronous test case method" enabled="true" name="testAsyncWithCallback">[Test(async, timeout="500")]
public function test_${testName}():void
{
	addEventListener(TestResultEvent.RESULT, Async.asyncHandler(this, test_${testName}_result2, 500));
	${addListener}(test_${testName}_result);
	${cursor}
}

private function test_${testName}_result(${arguments}):void
{
	dispatchEvent(new TestResultEvent(TestResultEvent.RESULT));
}

private function test_${testName}_result2(event:TestResultEvent, passThroughData:Object):void
{
	Assert.assertTrue(false);
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="FlexUnit test method for an asynchronous test with a callback, when the event shouldn't be triggered" enabled="true" name="testAsyncWithCallbackDontCall">[Test(async, timeout="1000")]
public function test_${testName}():void
{
	addEventListener(TestResultEvent.RESULT, Async.asyncHandler(this, test_${testName}_result2, 1000));
	
	_delay = new Timer(750);
	_delay.addEventListener(TimerEvent.TIMER, test_${testName}_timerResult);
	_delay.start();
	${addListener}(test_${testName}_fault);
	${cursor}
}

var _delay:Timer;

private function test_${testName}_fault():void
{
	_delay.stop();
	_delay.removeEventListener(TimerEvent.TIMER, test_${testName}_timerResult);
	Assert.fail("Callback called that shouldn't have been: test_${testName}");
}

protected function test_${testName}_timerResult(event:TimerEvent):void
{
	dispatchEvent(new TestResultEvent(TestResultEvent.RESULT));
}

private function test_${testName}_result2(event:TestResultEvent, passThroughData:Object):void
{
	Assert.assertTrue(false);
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Starting body code for FlexUnit test case class" enabled="true" name="testBody">package ${enclosing_package}
{

	public class ${enclosing_type}
	{
		// ------- Instance to test -------
		
		private var _instance:${class_to_test};
		
		
		// ------- Setup/Teardown -------
		
		[Before]
		public function setUp():void
		{
			_instance = new ${class_to_test}();
		}
		
		
		[After]
		public function tearDown():void
		{
			_instance = null;
		}
		
		
		[BeforeClass]
		public static function setUpBeforeClass():void
		{
		}
		
		
		[AfterClass]
		public static function tearDownAfterClass():void
		{
		}
		
		
		// ------- Test methods -------
		
		${cursor}
	}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="FlexUnit test method" enabled="true" name="testMethod">[Test]
public function test_${test_name}():void
{
	${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="Creates a toString function" enabled="true" id="com.adobe.flexide.as.core.codetemplates.toString" name="toString">override public function toString() : String {&#13;
	return "${enclosing_package_and_type}";&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="trace current method" enabled="true" id="com.adobe.flexide.as.core.codetemplates.traceMethod" name="traceMethod">trace("${enclosing_type}.${enclosing_method}(${enclosing_method_arguments})");</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Creates a try/catch block" enabled="true" id="com.adobe.flexide.as.core.codetemplates.tryCatch" name="tryCatch">try&#13;
{&#13;
	${line_selection}&#13;
	${cursor}&#13;
} &#13;
catch(${error}:${Error}) &#13;
{&#13;
	// ${todo}: handle exception&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Adds commandMap unmapping" enabled="true" name="unmapCommand">commandMap.unmapEvent(${EventClass}.${type}, ${CommandClass}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Unmap a listener for Robotlegs AS3" enabled="true" name="unmapListener">eventMap.unmapListener(${specifier:value(eventDispatcher, view)}, ${EventClass}.${type}, ${handler}, ${EventClass});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Variable declaration" enabled="true" name="var">var ${name}:${type} = new ${type}(${parameters});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="Creates local Vector instance with type" enabled="true" id="com.adobe.flexide.as.core.codetemplates.vector" name="vector">var ${name}:Vector.&lt;${type}&gt; = new Vector.&lt;${type}&gt;();</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Wrap a block of code in curly braces and indent it" enabled="true" name="wrapBraces">{
	${line_selection}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Wrap selection in parentheses" enabled="true" name="wrapParens">(${word_selection})</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="Wrap selection in double-quotes to create a String literal" enabled="true" name="wrapString">"${word_selection}"</template></templates>